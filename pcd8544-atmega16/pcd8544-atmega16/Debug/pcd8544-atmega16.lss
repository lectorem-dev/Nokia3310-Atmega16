
pcd8544-atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ec  00800060  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a7e  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000746  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e4  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030b  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000023cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 34       	cpi	r26, 0x4C	; 76
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main(void) {
	pcd8544_init();
  82:	0e 94 68 00 	call	0xd0	; 0xd0 <pcd8544_init>
	pcd8544_clear();
  86:	0e 94 c0 00 	call	0x180	; 0x180 <pcd8544_clear>
	pcd8544_print_at("Hello World", 1, 0);
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 fd 00 	call	0x1fa	; 0x1fa <pcd8544_print_at>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1a>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x24>
  a6:	00 00       	nop
  a8:	f6 cf       	rjmp	.-20     	; 0x96 <main+0x14>

000000aa <pcd8544_send>:

void pcd8544_print_string(char *str) {
	while (*str) {
		pcd8544_send_char(*str++);
	}
}
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	21 f4       	brne	.+8      	; 0xb6 <pcd8544_send+0xc>
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	88 bb       	out	0x18, r24	; 24
  b4:	03 c0       	rjmp	.+6      	; 0xbc <pcd8544_send+0x12>
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	6f b9       	out	0x0f, r22	; 15
  c4:	77 9b       	sbis	0x0e, 7	; 14
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <pcd8544_send+0x1a>
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <pcd8544_init>:
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	8c 6b       	ori	r24, 0xBC	; 188
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	81 e5       	ldi	r24, 0x51	; 81
  d8:	8d b9       	out	0x0d, r24	; 13
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	88 bb       	out	0x18, r24	; 24
  e0:	87 ea       	ldi	r24, 0xA7	; 167
  e2:	91 e6       	ldi	r25, 0x61	; 97
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <pcd8544_init+0x14>
  e8:	00 c0       	rjmp	.+0      	; 0xea <pcd8544_init+0x1a>
  ea:	00 00       	nop
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	61 e2       	ldi	r22, 0x21	; 33
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
  fa:	6a eb       	ldi	r22, 0xBA	; 186
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 10a:	64 e1       	ldi	r22, 0x14	; 20
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 112:	60 e2       	ldi	r22, 0x20	; 32
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 11a:	6c e0       	ldi	r22, 0x0C	; 12
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 122:	08 95       	ret

00000124 <pcd8544_send_char>:
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	90 ee       	ldi	r25, 0xE0	; 224
 12c:	98 0f       	add	r25, r24
 12e:	91 36       	cpi	r25, 0x61	; 97
 130:	18 f5       	brcc	.+70     	; 0x178 <pcd8544_send_char+0x54>
 132:	18 2f       	mov	r17, r24
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	14 c0       	rjmp	.+40     	; 0x16a <pcd8544_send_char+0x46>
 142:	21 2f       	mov	r18, r17
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	20 52       	subi	r18, 0x20	; 32
 148:	31 09       	sbc	r19, r1
 14a:	f9 01       	movw	r30, r18
 14c:	ee 0f       	add	r30, r30
 14e:	ff 1f       	adc	r31, r31
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e2 0f       	add	r30, r18
 156:	f3 1f       	adc	r31, r19
 158:	e4 59       	subi	r30, 0x94	; 148
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	ec 0f       	add	r30, r28
 15e:	fd 1f       	adc	r31, r29
 160:	60 81       	ld	r22, Z
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 168:	21 96       	adiw	r28, 0x01	; 1
 16a:	c5 30       	cpi	r28, 0x05	; 5
 16c:	d1 05       	cpc	r29, r1
 16e:	4c f3       	brlt	.-46     	; 0x142 <pcd8544_send_char+0x1e>
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	08 95       	ret

00000180 <pcd8544_clear>:
		}
		pcd8544_send(LCD_D, 0x00);
	}
}

void pcd8544_clear(void) {
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
	for (int i = 0; i < LCD_X * LCD_Y / 8; i++) {
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	05 c0       	rjmp	.+10     	; 0x194 <pcd8544_clear+0x14>
		pcd8544_send(LCD_D, 0x00);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
		pcd8544_send(LCD_D, 0x00);
	}
}

void pcd8544_clear(void) {
	for (int i = 0; i < LCD_X * LCD_Y / 8; i++) {
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	c8 3f       	cpi	r28, 0xF8	; 248
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	d8 07       	cpc	r29, r24
 19a:	bc f3       	brlt	.-18     	; 0x18a <pcd8544_clear+0xa>
		pcd8544_send(LCD_D, 0x00);
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <pcd8544_set_cursor>:

void pcd8544_set_cursor(uint8_t x, uint8_t y) {
 1a2:	cf 93       	push	r28
	x = x % 12; y = y % 6;
 1a4:	9b ea       	ldi	r25, 0xAB	; 171
 1a6:	89 9f       	mul	r24, r25
 1a8:	c1 2d       	mov	r28, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	c6 95       	lsr	r28
 1ae:	c6 95       	lsr	r28
 1b0:	c6 95       	lsr	r28
 1b2:	2c 2f       	mov	r18, r28
 1b4:	22 0f       	add	r18, r18
 1b6:	c2 0f       	add	r28, r18
 1b8:	2c 2f       	mov	r18, r28
 1ba:	22 0f       	add	r18, r18
 1bc:	22 0f       	add	r18, r18
 1be:	c8 2f       	mov	r28, r24
 1c0:	c2 1b       	sub	r28, r18
 1c2:	69 9f       	mul	r22, r25
 1c4:	81 2d       	mov	r24, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	86 95       	lsr	r24
 1ca:	86 95       	lsr	r24
 1cc:	98 2f       	mov	r25, r24
 1ce:	99 0f       	add	r25, r25
 1d0:	89 0f       	add	r24, r25
 1d2:	98 2f       	mov	r25, r24
 1d4:	99 0f       	add	r25, r25
 1d6:	86 2f       	mov	r24, r22
 1d8:	89 1b       	sub	r24, r25
	pcd8544_send(LCD_C, 0x40 + y);
 1da:	60 e4       	ldi	r22, 0x40	; 64
 1dc:	68 0f       	add	r22, r24
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
	pcd8544_send(LCD_C, 0x80 + x * 7);
 1e4:	6c 2f       	mov	r22, r28
 1e6:	66 0f       	add	r22, r22
 1e8:	66 0f       	add	r22, r22
 1ea:	66 0f       	add	r22, r22
 1ec:	6c 1b       	sub	r22, r28
 1ee:	60 58       	subi	r22, 0x80	; 128
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 55 00 	call	0xaa	; 0xaa <pcd8544_send>
}
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <pcd8544_print_at>:

void pcd8544_print_at(char *str, uint8_t x, uint8_t y) {
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
 200:	86 2f       	mov	r24, r22
	pcd8544_set_cursor(x, y);
 202:	64 2f       	mov	r22, r20
 204:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <pcd8544_set_cursor>
	while (*str) {
 208:	03 c0       	rjmp	.+6      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
		pcd8544_send_char(*str++);
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	0e 94 92 00 	call	0x124	; 0x124 <pcd8544_send_char>
	pcd8544_send(LCD_C, 0x80 + x * 7);
}

void pcd8544_print_at(char *str, uint8_t x, uint8_t y) {
	pcd8544_set_cursor(x, y);
	while (*str) {
 210:	88 81       	ld	r24, Y
 212:	81 11       	cpse	r24, r1
 214:	fa cf       	rjmp	.-12     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
		pcd8544_send_char(*str++);
	}
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
