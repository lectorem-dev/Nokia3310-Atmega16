
pcd8544-atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000226  00800060  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800286  00800286  00000ea8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016b4  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a74  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b73  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000514  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d1  00000000  00000000  00004408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004dd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  8a:	0c 94 f5 05 	jmp	0xbea	; 0xbea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <shift_register_init>:
#define SH_LD PD2
#define CLK   PD3
#define QH    PD4

void shift_register_init() {
	DDRD |= (1 << SH_LD) | (1 << CLK);
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8c 60       	ori	r24, 0x0C	; 12
  96:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << QH);
  98:	81 b3       	in	r24, 0x11	; 17
  9a:	8f 7e       	andi	r24, 0xEF	; 239
  9c:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << SH_LD);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1 << CLK);
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	00 c0       	rjmp	.+0      	; 0xac <shift_register_init+0x1a>
  ac:	00 c0       	rjmp	.+0      	; 0xae <shift_register_init+0x1c>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <read_buttons>:
	_delay_us(5);
}

uint8_t read_buttons() {
	uint8_t data = 0;
	PORTD &= ~(1 << SH_LD);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	00 c0       	rjmp	.+0      	; 0xba <read_buttons+0x8>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <read_buttons+0xa>
  bc:	00 00       	nop
	_delay_us(5);
	PORTD |= (1 << SH_LD);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <read_buttons+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <read_buttons+0x16>
  c8:	00 00       	nop
	_delay_us(5);

	for (uint8_t i = 0; i < 8; i++) {
  ca:	20 e0       	ldi	r18, 0x00	; 0
	PORTD &= ~(1 << CLK);
	_delay_us(5);
}

uint8_t read_buttons() {
	uint8_t data = 0;
  cc:	80 e0       	ldi	r24, 0x00	; 0
	PORTD &= ~(1 << SH_LD);
	_delay_us(5);
	PORTD |= (1 << SH_LD);
	_delay_us(5);

	for (uint8_t i = 0; i < 8; i++) {
  ce:	0c c0       	rjmp	.+24     	; 0xe8 <read_buttons+0x36>
		data <<= 1;
  d0:	88 0f       	add	r24, r24
		if (PIND & (1 << QH)) {
  d2:	84 99       	sbic	0x10, 4	; 16
			data |= 1;
  d4:	81 60       	ori	r24, 0x01	; 1
		}
		PORTD |= (1 << CLK);
  d6:	92 b3       	in	r25, 0x12	; 18
  d8:	98 60       	ori	r25, 0x08	; 8
  da:	92 bb       	out	0x12, r25	; 18
  dc:	00 c0       	rjmp	.+0      	; 0xde <read_buttons+0x2c>
		_delay_us(2);
		PORTD &= ~(1 << CLK);
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	97 7f       	andi	r25, 0xF7	; 247
  e2:	92 bb       	out	0x12, r25	; 18
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <read_buttons+0x34>
	PORTD &= ~(1 << SH_LD);
	_delay_us(5);
	PORTD |= (1 << SH_LD);
	_delay_us(5);

	for (uint8_t i = 0; i < 8; i++) {
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	28 30       	cpi	r18, 0x08	; 8
  ea:	90 f3       	brcs	.-28     	; 0xd0 <read_buttons+0x1e>
		_delay_us(2);
		PORTD &= ~(1 << CLK);
		_delay_us(2);
	}
	return data;
  ec:	08 95       	ret

000000ee <draw_frame>:
	{3, 4}, {5, 2}, {6, 4}, {8, 3}, {9, 2}
};

uint8_t game_lost = 0;

void draw_frame(void) {
  ee:	cf 93       	push	r28
	for (uint8_t x = 0; x < 12; x++) {
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	08 c0       	rjmp	.+16     	; 0x104 <draw_frame+0x16>
		pcd8544_set_cursor(x, 1);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	8c 2f       	mov	r24, r28
  f8:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
		pcd8544_send_char('#');
  fc:	83 e2       	ldi	r24, 0x23	; 35
  fe:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
};

uint8_t game_lost = 0;

void draw_frame(void) {
	for (uint8_t x = 0; x < 12; x++) {
 102:	cf 5f       	subi	r28, 0xFF	; 255
 104:	cc 30       	cpi	r28, 0x0C	; 12
 106:	b0 f3       	brcs	.-20     	; 0xf4 <draw_frame+0x6>
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	08 c0       	rjmp	.+16     	; 0x11c <draw_frame+0x2e>
		pcd8544_set_cursor(x, 1);
		pcd8544_send_char('#');
	}
	for (uint8_t x = 0; x < 12; x++) {
		pcd8544_set_cursor(x, 5);
 10c:	65 e0       	ldi	r22, 0x05	; 5
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
		pcd8544_send_char('#');
 114:	83 e2       	ldi	r24, 0x23	; 35
 116:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
void draw_frame(void) {
	for (uint8_t x = 0; x < 12; x++) {
		pcd8544_set_cursor(x, 1);
		pcd8544_send_char('#');
	}
	for (uint8_t x = 0; x < 12; x++) {
 11a:	cf 5f       	subi	r28, 0xFF	; 255
 11c:	cc 30       	cpi	r28, 0x0C	; 12
 11e:	b0 f3       	brcs	.-20     	; 0x10c <draw_frame+0x1e>
 120:	c1 e0       	ldi	r28, 0x01	; 1
 122:	0f c0       	rjmp	.+30     	; 0x142 <draw_frame+0x54>
		pcd8544_set_cursor(x, 5);
		pcd8544_send_char('#');
	}
	for (uint8_t y = 1; y < 5; y++) {
		pcd8544_set_cursor(0, y);
 124:	6c 2f       	mov	r22, r28
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
		pcd8544_send_char('#');
 12c:	83 e2       	ldi	r24, 0x23	; 35
 12e:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
		pcd8544_set_cursor(11, y);
 132:	6c 2f       	mov	r22, r28
 134:	8b e0       	ldi	r24, 0x0B	; 11
 136:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
		pcd8544_send_char('#');
 13a:	83 e2       	ldi	r24, 0x23	; 35
 13c:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
	}
	for (uint8_t x = 0; x < 12; x++) {
		pcd8544_set_cursor(x, 5);
		pcd8544_send_char('#');
	}
	for (uint8_t y = 1; y < 5; y++) {
 140:	cf 5f       	subi	r28, 0xFF	; 255
 142:	c5 30       	cpi	r28, 0x05	; 5
 144:	78 f3       	brcs	.-34     	; 0x124 <draw_frame+0x36>
		pcd8544_set_cursor(0, y);
		pcd8544_send_char('#');
		pcd8544_set_cursor(11, y);
		pcd8544_send_char('#');
	}
}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <draw_obstacles>:

void draw_obstacles(void) {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	for (int i = 0; i < OBSTACLE_COUNT; i++) {
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	0f c0       	rjmp	.+30     	; 0x172 <draw_obstacles+0x28>
		uint8_t ox = obstacles[i][0];
 154:	fe 01       	movw	r30, r28
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	e0 5a       	subi	r30, 0xA0	; 160
 160:	ff 4f       	sbci	r31, 0xFF	; 255
		uint8_t oy = obstacles[i][1];
 162:	62 81       	ldd	r22, Z+2	; 0x02
		pcd8544_set_cursor(ox, oy);
 164:	80 81       	ld	r24, Z
 166:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
		pcd8544_send_char('@');
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
		pcd8544_send_char('#');
	}
}

void draw_obstacles(void) {
	for (int i = 0; i < OBSTACLE_COUNT; i++) {
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	c5 30       	cpi	r28, 0x05	; 5
 174:	d1 05       	cpc	r29, r1
 176:	74 f3       	brlt	.-36     	; 0x154 <draw_obstacles+0xa>
		uint8_t ox = obstacles[i][0];
		uint8_t oy = obstacles[i][1];
		pcd8544_set_cursor(ox, oy);
		pcd8544_send_char('@');
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <is_obstacle>:

int is_obstacle(int x, int y) {
	for (int i = 0; i < OBSTACLE_COUNT; i++) {
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	1a c0       	rjmp	.+52     	; 0x1b8 <is_obstacle+0x3a>
		if (obstacles[i][0] == x && obstacles[i][1] == y) {
 184:	f9 01       	movw	r30, r18
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	40 81       	ld	r20, Z
 194:	51 81       	ldd	r21, Z+1	; 0x01
 196:	48 17       	cp	r20, r24
 198:	59 07       	cpc	r21, r25
 19a:	61 f4       	brne	.+24     	; 0x1b4 <is_obstacle+0x36>
 19c:	f9 01       	movw	r30, r18
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e0 5a       	subi	r30, 0xA0	; 160
 1a8:	ff 4f       	sbci	r31, 0xFF	; 255
 1aa:	42 81       	ldd	r20, Z+2	; 0x02
 1ac:	53 81       	ldd	r21, Z+3	; 0x03
 1ae:	46 17       	cp	r20, r22
 1b0:	57 07       	cpc	r21, r23
 1b2:	41 f0       	breq	.+16     	; 0x1c4 <is_obstacle+0x46>
		pcd8544_send_char('@');
	}
}

int is_obstacle(int x, int y) {
	for (int i = 0; i < OBSTACLE_COUNT; i++) {
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	25 30       	cpi	r18, 0x05	; 5
 1ba:	31 05       	cpc	r19, r1
 1bc:	1c f3       	brlt	.-58     	; 0x184 <is_obstacle+0x6>
		if (obstacles[i][0] == x && obstacles[i][1] == y) {
			return 1;
		}
	}
	return 0;
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	08 95       	ret
}

int is_obstacle(int x, int y) {
	for (int i = 0; i < OBSTACLE_COUNT; i++) {
		if (obstacles[i][0] == x && obstacles[i][1] == y) {
			return 1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	return 0;
}
 1c8:	08 95       	ret

000001ca <display_coordinates>:

void display_coordinates(uint8_t x, uint8_t y) {
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	cd b7       	in	r28, 0x3d	; 61
 1d4:	de b7       	in	r29, 0x3e	; 62
 1d6:	60 97       	sbiw	r28, 0x10	; 16
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];
	sprintf(buffer, "X: %02d  Y: %02d", x, y);
 1e2:	1f 92       	push	r1
 1e4:	6f 93       	push	r22
 1e6:	1f 92       	push	r1
 1e8:	8f 93       	push	r24
 1ea:	84 e7       	ldi	r24, 0x74	; 116
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9f 93       	push	r25
 1f0:	8f 93       	push	r24
 1f2:	8e 01       	movw	r16, r28
 1f4:	0f 5f       	subi	r16, 0xFF	; 255
 1f6:	1f 4f       	sbci	r17, 0xFF	; 255
 1f8:	1f 93       	push	r17
 1fa:	0f 93       	push	r16
 1fc:	0e 94 0b 03 	call	0x616	; 0x616 <sprintf>
	pcd8544_print_at(buffer, 0, 0);
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	c8 01       	movw	r24, r16
 206:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pcd8544_print_at>
}
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	60 96       	adiw	r28, 0x10	; 16
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <display_win_message>:

void display_win_message(void) {
	pcd8544_print_at("You Win!", 4, 2);
 22a:	42 e0       	ldi	r20, 0x02	; 2
 22c:	64 e0       	ldi	r22, 0x04	; 4
 22e:	85 e8       	ldi	r24, 0x85	; 133
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pcd8544_print_at>
 236:	08 95       	ret

00000238 <display_lose_message>:
}

void display_lose_message(void) {
	pcd8544_print_at("Game Over!", 2, 2);
 238:	42 e0       	ldi	r20, 0x02	; 2
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	8e e8       	ldi	r24, 0x8E	; 142
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pcd8544_print_at>
 244:	08 95       	ret

00000246 <display_timer>:
}

void display_timer(uint8_t time_left) {
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	60 97       	sbiw	r28, 0x10	; 16
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];
	sprintf(buffer, "Next in: %d", time_left);
 25e:	1f 92       	push	r1
 260:	8f 93       	push	r24
 262:	89 e9       	ldi	r24, 0x99	; 153
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	9f 93       	push	r25
 268:	8f 93       	push	r24
 26a:	8e 01       	movw	r16, r28
 26c:	0f 5f       	subi	r16, 0xFF	; 255
 26e:	1f 4f       	sbci	r17, 0xFF	; 255
 270:	1f 93       	push	r17
 272:	0f 93       	push	r16
 274:	0e 94 0b 03 	call	0x616	; 0x616 <sprintf>
	pcd8544_print_at(buffer, 0, 4);
 278:	44 e0       	ldi	r20, 0x04	; 4
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	c8 01       	movw	r24, r16
 27e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <pcd8544_print_at>
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	60 96       	adiw	r28, 0x10	; 16
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <reset_game>:

void reset_game(uint8_t *x, uint8_t *y, uint8_t *game_won) {
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
 2b2:	8b 01       	movw	r16, r22
 2b4:	7a 01       	movw	r14, r20
	*x = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	88 83       	st	Y, r24
	*y = 4;
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	fb 01       	movw	r30, r22
 2be:	80 83       	st	Z, r24
	pcd8544_clear();
 2c0:	0e 94 bd 02 	call	0x57a	; 0x57a <pcd8544_clear>
	draw_frame();
 2c4:	0e 94 77 00 	call	0xee	; 0xee <draw_frame>
	draw_obstacles();
 2c8:	0e 94 a5 00 	call	0x14a	; 0x14a <draw_obstacles>
	display_coordinates(*x, *y);
 2cc:	f8 01       	movw	r30, r16
 2ce:	60 81       	ld	r22, Z
 2d0:	88 81       	ld	r24, Y
 2d2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <display_coordinates>

	uint8_t target_x = 10, target_y = 2;
	pcd8544_set_cursor(target_x, target_y);
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
	pcd8544_send_char('$');
 2de:	84 e2       	ldi	r24, 0x24	; 36
 2e0:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>

	pcd8544_set_cursor(*x, *y);
 2e4:	f8 01       	movw	r30, r16
 2e6:	60 81       	ld	r22, Z
 2e8:	88 81       	ld	r24, Y
 2ea:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
	pcd8544_send_char('*');
 2ee:	8a e2       	ldi	r24, 0x2A	; 42
 2f0:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>

	*game_won = 0;
 2f4:	f7 01       	movw	r30, r14
 2f6:	10 82       	st	Z, r1
	game_lost = 0;
 2f8:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <__data_end>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	08 95       	ret

0000030a <main>:
#include "game.h"

#include <util/delay.h>
#include <avr/io.h>

int main(void) {
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	00 d0       	rcall	.+0      	; 0x310 <main+0x6>
 310:	1f 92       	push	r1
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
	pcd8544_init();
 316:	0e 94 65 02 	call	0x4ca	; 0x4ca <pcd8544_init>
	pcd8544_clear();
 31a:	0e 94 bd 02 	call	0x57a	; 0x57a <pcd8544_clear>
	shift_register_init();
 31e:	0e 94 49 00 	call	0x92	; 0x92 <shift_register_init>

	uint8_t x = 1, y = 4;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t last_x = x, last_y = y;
	uint8_t game_won = 0;
 32a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t display_updated = 1;

	reset_game(&x, &y, &game_won);
 32c:	ae 01       	movw	r20, r28
 32e:	4d 5f       	subi	r20, 0xFD	; 253
 330:	5f 4f       	sbci	r21, 0xFF	; 255
 332:	be 01       	movw	r22, r28
 334:	6e 5f       	subi	r22, 0xFE	; 254
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <reset_game>
	pcd8544_init();
	pcd8544_clear();
	shift_register_init();

	uint8_t x = 1, y = 4;
	uint8_t last_x = x, last_y = y;
 340:	04 e0       	ldi	r16, 0x04	; 4
 342:	ee 24       	eor	r14, r14
 344:	e3 94       	inc	r14
	uint8_t display_updated = 1;

	reset_game(&x, &y, &game_won);

	while (1) {
		if (game_lost) {
 346:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <__data_end>
 34a:	88 23       	and	r24, r24
 34c:	01 f1       	breq	.+64     	; 0x38e <main+0x84>
			display_lose_message();
 34e:	0e 94 1c 01 	call	0x238	; 0x238 <display_lose_message>
			for (uint8_t i = 3; i > 0; i--) {
 352:	13 e0       	ldi	r17, 0x03	; 3
 354:	0d c0       	rjmp	.+26     	; 0x370 <main+0x66>
				display_timer(i);
 356:	81 2f       	mov	r24, r17
 358:	0e 94 23 01 	call	0x246	; 0x246 <display_timer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	2f e3       	ldi	r18, 0x3F	; 63
 35e:	8d e0       	ldi	r24, 0x0D	; 13
 360:	93 e0       	ldi	r25, 0x03	; 3
 362:	21 50       	subi	r18, 0x01	; 1
 364:	80 40       	sbci	r24, 0x00	; 0
 366:	90 40       	sbci	r25, 0x00	; 0
 368:	e1 f7       	brne	.-8      	; 0x362 <main+0x58>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <main+0x62>
 36c:	00 00       	nop
	reset_game(&x, &y, &game_won);

	while (1) {
		if (game_lost) {
			display_lose_message();
			for (uint8_t i = 3; i > 0; i--) {
 36e:	11 50       	subi	r17, 0x01	; 1
 370:	11 11       	cpse	r17, r1
 372:	f1 cf       	rjmp	.-30     	; 0x356 <main+0x4c>
				display_timer(i);
				_delay_ms(1000);
			}
			reset_game(&x, &y, &game_won);
 374:	ae 01       	movw	r20, r28
 376:	4d 5f       	subi	r20, 0xFD	; 253
 378:	5f 4f       	sbci	r21, 0xFF	; 255
 37a:	be 01       	movw	r22, r28
 37c:	6e 5f       	subi	r22, 0xFE	; 254
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	0e 94 52 01 	call	0x2a4	; 0x2a4 <reset_game>
			last_x = x;
 388:	e9 80       	ldd	r14, Y+1	; 0x01
			last_y = y;
 38a:	0a 81       	ldd	r16, Y+2	; 0x02
			display_updated = 1;
			continue;
 38c:	dc cf       	rjmp	.-72     	; 0x346 <main+0x3c>
		}

		if (x == 10 && y == 2 && !game_won) {
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	8a 30       	cpi	r24, 0x0A	; 10
 392:	41 f4       	brne	.+16     	; 0x3a4 <main+0x9a>
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	29 f4       	brne	.+10     	; 0x3a4 <main+0x9a>
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	81 11       	cpse	r24, r1
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <main+0x9a>
			game_won = 1;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	8b 83       	std	Y+3, r24	; 0x03
			display_updated = 0;
		}

		if (game_won) {
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	88 23       	and	r24, r24
 3a8:	f1 f0       	breq	.+60     	; 0x3e6 <main+0xdc>
			display_win_message();
 3aa:	0e 94 15 01 	call	0x22a	; 0x22a <display_win_message>
			for (uint8_t i = 3; i > 0; i--) {
 3ae:	13 e0       	ldi	r17, 0x03	; 3
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <main+0xc2>
				display_timer(i);
 3b2:	81 2f       	mov	r24, r17
 3b4:	0e 94 23 01 	call	0x246	; 0x246 <display_timer>
 3b8:	2f e3       	ldi	r18, 0x3F	; 63
 3ba:	8d e0       	ldi	r24, 0x0D	; 13
 3bc:	93 e0       	ldi	r25, 0x03	; 3
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0xb4>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0xbe>
 3c8:	00 00       	nop
			display_updated = 0;
		}

		if (game_won) {
			display_win_message();
			for (uint8_t i = 3; i > 0; i--) {
 3ca:	11 50       	subi	r17, 0x01	; 1
 3cc:	11 11       	cpse	r17, r1
 3ce:	f1 cf       	rjmp	.-30     	; 0x3b2 <main+0xa8>
				display_timer(i);
				_delay_ms(1000);
			}

			reset_game(&x, &y, &game_won);
 3d0:	ae 01       	movw	r20, r28
 3d2:	4d 5f       	subi	r20, 0xFD	; 253
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	be 01       	movw	r22, r28
 3d8:	6e 5f       	subi	r22, 0xFE	; 254
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	ce 01       	movw	r24, r28
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <reset_game>
			display_updated = 1;
			continue;
 3e4:	b0 cf       	rjmp	.-160    	; 0x346 <main+0x3c>
		}

		uint8_t btns = read_buttons();
 3e6:	0e 94 59 00 	call	0xb2	; 0xb2 <read_buttons>
		uint8_t next_x = x;
 3ea:	f9 80       	ldd	r15, Y+1	; 0x01
		uint8_t next_y = y;
 3ec:	1a 81       	ldd	r17, Y+2	; 0x02

		if (!(btns & (1 << 0)) && y > 2) next_y--;
 3ee:	80 fd       	sbrc	r24, 0
 3f0:	04 c0       	rjmp	.+8      	; 0x3fa <main+0xf0>
 3f2:	13 30       	cpi	r17, 0x03	; 3
 3f4:	10 f0       	brcs	.+4      	; 0x3fa <main+0xf0>
 3f6:	11 50       	subi	r17, 0x01	; 1
 3f8:	13 c0       	rjmp	.+38     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		else if (!(btns & (1 << 1)) && y < 4) next_y++;
 3fa:	81 fd       	sbrc	r24, 1
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 3fe:	14 30       	cpi	r17, 0x04	; 4
 400:	10 f4       	brcc	.+4      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 402:	1f 5f       	subi	r17, 0xFF	; 255
 404:	0d c0       	rjmp	.+26     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		else if (!(btns & (1 << 2)) && x > 1) next_x--;
 406:	82 fd       	sbrc	r24, 2
 408:	05 c0       	rjmp	.+10     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	2f 15       	cp	r18, r15
 40e:	10 f4       	brcc	.+4      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 410:	fa 94       	dec	r15
 412:	06 c0       	rjmp	.+12     	; 0x420 <__DATA_REGION_LENGTH__+0x20>
		else if (!(btns & (1 << 3)) && x < 10) next_x++;
 414:	83 fd       	sbrc	r24, 3
 416:	04 c0       	rjmp	.+8      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 418:	89 e0       	ldi	r24, 0x09	; 9
 41a:	8f 15       	cp	r24, r15
 41c:	08 f0       	brcs	.+2      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 41e:	f3 94       	inc	r15

		if (is_obstacle(next_x, next_y)) {
 420:	61 2f       	mov	r22, r17
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	8f 2d       	mov	r24, r15
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 bf 00 	call	0x17e	; 0x17e <is_obstacle>
 42c:	89 2b       	or	r24, r25
 42e:	21 f0       	breq	.+8      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
			game_lost = 1;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <__data_end>
			display_updated = 0;
			continue;
 436:	87 cf       	rjmp	.-242    	; 0x346 <main+0x3c>
			} else if (next_x != last_x || next_y != last_y) {
 438:	ef 10       	cpse	r14, r15
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 43c:	01 17       	cp	r16, r17
 43e:	59 f1       	breq	.+86     	; 0x496 <__stack+0x37>
			pcd8544_set_cursor(last_x, last_y);
 440:	60 2f       	mov	r22, r16
 442:	8e 2d       	mov	r24, r14
 444:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
			if (last_x == 10 && last_y == 2) {
 448:	9a e0       	ldi	r25, 0x0A	; 10
 44a:	e9 12       	cpse	r14, r25
 44c:	06 c0       	rjmp	.+12     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 44e:	02 30       	cpi	r16, 0x02	; 2
 450:	21 f4       	brne	.+8      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
				pcd8544_send_char('$');
 452:	84 e2       	ldi	r24, 0x24	; 36
 454:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
 458:	0f c0       	rjmp	.+30     	; 0x478 <__stack+0x19>
				} else if (is_obstacle(last_x, last_y)) {
 45a:	60 2f       	mov	r22, r16
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	8e 2d       	mov	r24, r14
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 bf 00 	call	0x17e	; 0x17e <is_obstacle>
 466:	89 2b       	or	r24, r25
 468:	21 f0       	breq	.+8      	; 0x472 <__stack+0x13>
				pcd8544_send_char('@');
 46a:	80 e4       	ldi	r24, 0x40	; 64
 46c:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
 470:	03 c0       	rjmp	.+6      	; 0x478 <__stack+0x19>
				} else {
				pcd8544_send_char(' ');
 472:	80 e2       	ldi	r24, 0x20	; 32
 474:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
			}

			x = next_x;
 478:	f9 82       	std	Y+1, r15	; 0x01
			y = next_y;
 47a:	1a 83       	std	Y+2, r17	; 0x02

			pcd8544_set_cursor(x, y);
 47c:	61 2f       	mov	r22, r17
 47e:	8f 2d       	mov	r24, r15
 480:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
			pcd8544_send_char('*');
 484:	8a e2       	ldi	r24, 0x2A	; 42
 486:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>

			display_coordinates(x, y);
 48a:	6a 81       	ldd	r22, Y+2	; 0x02
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <display_coordinates>

			last_x = x;
 492:	e9 80       	ldd	r14, Y+1	; 0x01
			last_y = y;
 494:	0a 81       	ldd	r16, Y+2	; 0x02
 496:	8f e4       	ldi	r24, 0x4F	; 79
 498:	93 ec       	ldi	r25, 0xC3	; 195
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__stack+0x3b>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__stack+0x41>
 4a0:	00 00       	nop
 4a2:	51 cf       	rjmp	.-350    	; 0x346 <main+0x3c>

000004a4 <pcd8544_send>:

void pcd8544_print_string(char *str) {
	while (*str) {
		pcd8544_send_char(*str++);
	}
}
 4a4:	81 30       	cpi	r24, 0x01	; 1
 4a6:	21 f4       	brne	.+8      	; 0x4b0 <pcd8544_send+0xc>
 4a8:	88 b3       	in	r24, 0x18	; 24
 4aa:	88 60       	ori	r24, 0x08	; 8
 4ac:	88 bb       	out	0x18, r24	; 24
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <pcd8544_send+0x12>
 4b0:	88 b3       	in	r24, 0x18	; 24
 4b2:	87 7f       	andi	r24, 0xF7	; 247
 4b4:	88 bb       	out	0x18, r24	; 24
 4b6:	88 b3       	in	r24, 0x18	; 24
 4b8:	8f 7e       	andi	r24, 0xEF	; 239
 4ba:	88 bb       	out	0x18, r24	; 24
 4bc:	6f b9       	out	0x0f, r22	; 15
 4be:	77 9b       	sbis	0x0e, 7	; 14
 4c0:	fe cf       	rjmp	.-4      	; 0x4be <pcd8544_send+0x1a>
 4c2:	88 b3       	in	r24, 0x18	; 24
 4c4:	80 61       	ori	r24, 0x10	; 16
 4c6:	88 bb       	out	0x18, r24	; 24
 4c8:	08 95       	ret

000004ca <pcd8544_init>:
 4ca:	87 b3       	in	r24, 0x17	; 23
 4cc:	8c 6b       	ori	r24, 0xBC	; 188
 4ce:	87 bb       	out	0x17, r24	; 23
 4d0:	81 e5       	ldi	r24, 0x51	; 81
 4d2:	8d b9       	out	0x0d, r24	; 13
 4d4:	88 b3       	in	r24, 0x18	; 24
 4d6:	8b 7f       	andi	r24, 0xFB	; 251
 4d8:	88 bb       	out	0x18, r24	; 24
 4da:	87 ea       	ldi	r24, 0xA7	; 167
 4dc:	91 e6       	ldi	r25, 0x61	; 97
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <pcd8544_init+0x14>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <pcd8544_init+0x1a>
 4e4:	00 00       	nop
 4e6:	88 b3       	in	r24, 0x18	; 24
 4e8:	84 60       	ori	r24, 0x04	; 4
 4ea:	88 bb       	out	0x18, r24	; 24
 4ec:	61 e2       	ldi	r22, 0x21	; 33
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 4f4:	6a eb       	ldi	r22, 0xBA	; 186
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 4fc:	64 e0       	ldi	r22, 0x04	; 4
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 504:	64 e1       	ldi	r22, 0x14	; 20
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 50c:	60 e2       	ldi	r22, 0x20	; 32
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 514:	6c e0       	ldi	r22, 0x0C	; 12
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 51c:	08 95       	ret

0000051e <pcd8544_send_char>:
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	90 ee       	ldi	r25, 0xE0	; 224
 526:	98 0f       	add	r25, r24
 528:	91 36       	cpi	r25, 0x61	; 97
 52a:	18 f5       	brcc	.+70     	; 0x572 <pcd8544_send_char+0x54>
 52c:	18 2f       	mov	r17, r24
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 536:	c0 e0       	ldi	r28, 0x00	; 0
 538:	d0 e0       	ldi	r29, 0x00	; 0
 53a:	14 c0       	rjmp	.+40     	; 0x564 <pcd8544_send_char+0x46>
 53c:	21 2f       	mov	r18, r17
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	20 52       	subi	r18, 0x20	; 32
 542:	31 09       	sbc	r19, r1
 544:	f9 01       	movw	r30, r18
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	e2 0f       	add	r30, r18
 550:	f3 1f       	adc	r31, r19
 552:	eb 55       	subi	r30, 0x5B	; 91
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	ec 0f       	add	r30, r28
 558:	fd 1f       	adc	r31, r29
 55a:	60 81       	ld	r22, Z
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 562:	21 96       	adiw	r28, 0x01	; 1
 564:	c5 30       	cpi	r28, 0x05	; 5
 566:	d1 05       	cpc	r29, r1
 568:	4c f3       	brlt	.-46     	; 0x53c <pcd8544_send_char+0x1e>
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	08 95       	ret

0000057a <pcd8544_clear>:
		}
		pcd8544_send(LCD_D, 0x00);
	}
}

void pcd8544_clear(void) {
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
	for (int i = 0; i < LCD_X * LCD_Y / 8; i++) {
 57e:	c0 e0       	ldi	r28, 0x00	; 0
 580:	d0 e0       	ldi	r29, 0x00	; 0
 582:	05 c0       	rjmp	.+10     	; 0x58e <pcd8544_clear+0x14>
		pcd8544_send(LCD_D, 0x00);
 584:	60 e0       	ldi	r22, 0x00	; 0
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
		pcd8544_send(LCD_D, 0x00);
	}
}

void pcd8544_clear(void) {
	for (int i = 0; i < LCD_X * LCD_Y / 8; i++) {
 58c:	21 96       	adiw	r28, 0x01	; 1
 58e:	c8 3f       	cpi	r28, 0xF8	; 248
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	d8 07       	cpc	r29, r24
 594:	bc f3       	brlt	.-18     	; 0x584 <pcd8544_clear+0xa>
		pcd8544_send(LCD_D, 0x00);
	}
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <pcd8544_set_cursor>:

void pcd8544_set_cursor(uint8_t x, uint8_t y) {
 59c:	cf 93       	push	r28
	x = x % 12; y = y % 6;
 59e:	9b ea       	ldi	r25, 0xAB	; 171
 5a0:	89 9f       	mul	r24, r25
 5a2:	c1 2d       	mov	r28, r1
 5a4:	11 24       	eor	r1, r1
 5a6:	c6 95       	lsr	r28
 5a8:	c6 95       	lsr	r28
 5aa:	c6 95       	lsr	r28
 5ac:	2c 2f       	mov	r18, r28
 5ae:	22 0f       	add	r18, r18
 5b0:	c2 0f       	add	r28, r18
 5b2:	2c 2f       	mov	r18, r28
 5b4:	22 0f       	add	r18, r18
 5b6:	22 0f       	add	r18, r18
 5b8:	c8 2f       	mov	r28, r24
 5ba:	c2 1b       	sub	r28, r18
 5bc:	69 9f       	mul	r22, r25
 5be:	81 2d       	mov	r24, r1
 5c0:	11 24       	eor	r1, r1
 5c2:	86 95       	lsr	r24
 5c4:	86 95       	lsr	r24
 5c6:	98 2f       	mov	r25, r24
 5c8:	99 0f       	add	r25, r25
 5ca:	89 0f       	add	r24, r25
 5cc:	98 2f       	mov	r25, r24
 5ce:	99 0f       	add	r25, r25
 5d0:	86 2f       	mov	r24, r22
 5d2:	89 1b       	sub	r24, r25
	pcd8544_send(LCD_C, 0x40 + y);
 5d4:	60 e4       	ldi	r22, 0x40	; 64
 5d6:	68 0f       	add	r22, r24
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
	pcd8544_send(LCD_C, 0x80 + x * 7);
 5de:	6c 2f       	mov	r22, r28
 5e0:	66 0f       	add	r22, r22
 5e2:	66 0f       	add	r22, r22
 5e4:	66 0f       	add	r22, r22
 5e6:	6c 1b       	sub	r22, r28
 5e8:	60 58       	subi	r22, 0x80	; 128
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 52 02 	call	0x4a4	; 0x4a4 <pcd8544_send>
}
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <pcd8544_print_at>:

void pcd8544_print_at(char *str, uint8_t x, uint8_t y) {
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	ec 01       	movw	r28, r24
 5fa:	86 2f       	mov	r24, r22
	pcd8544_set_cursor(x, y);
 5fc:	64 2f       	mov	r22, r20
 5fe:	0e 94 ce 02 	call	0x59c	; 0x59c <pcd8544_set_cursor>
	while (*str) {
 602:	03 c0       	rjmp	.+6      	; 0x60a <pcd8544_print_at+0x16>
		pcd8544_send_char(*str++);
 604:	21 96       	adiw	r28, 0x01	; 1
 606:	0e 94 8f 02 	call	0x51e	; 0x51e <pcd8544_send_char>
	pcd8544_send(LCD_C, 0x80 + x * 7);
}

void pcd8544_print_at(char *str, uint8_t x, uint8_t y) {
	pcd8544_set_cursor(x, y);
	while (*str) {
 60a:	88 81       	ld	r24, Y
 60c:	81 11       	cpse	r24, r1
 60e:	fa cf       	rjmp	.-12     	; 0x604 <pcd8544_print_at+0x10>
		pcd8544_send_char(*str++);
	}
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <sprintf>:
 616:	ae e0       	ldi	r26, 0x0E	; 14
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	e1 e1       	ldi	r30, 0x11	; 17
 61c:	f3 e0       	ldi	r31, 0x03	; 3
 61e:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__prologue_saves__+0x1c>
 622:	0d 89       	ldd	r16, Y+21	; 0x15
 624:	1e 89       	ldd	r17, Y+22	; 0x16
 626:	86 e0       	ldi	r24, 0x06	; 6
 628:	8c 83       	std	Y+4, r24	; 0x04
 62a:	1a 83       	std	Y+2, r17	; 0x02
 62c:	09 83       	std	Y+1, r16	; 0x01
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	9f e7       	ldi	r25, 0x7F	; 127
 632:	9e 83       	std	Y+6, r25	; 0x06
 634:	8d 83       	std	Y+5, r24	; 0x05
 636:	ae 01       	movw	r20, r28
 638:	47 5e       	subi	r20, 0xE7	; 231
 63a:	5f 4f       	sbci	r21, 0xFF	; 255
 63c:	6f 89       	ldd	r22, Y+23	; 0x17
 63e:	78 8d       	ldd	r23, Y+24	; 0x18
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	0e 94 2d 03 	call	0x65a	; 0x65a <vfprintf>
 648:	ef 81       	ldd	r30, Y+7	; 0x07
 64a:	f8 85       	ldd	r31, Y+8	; 0x08
 64c:	e0 0f       	add	r30, r16
 64e:	f1 1f       	adc	r31, r17
 650:	10 82       	st	Z, r1
 652:	2e 96       	adiw	r28, 0x0e	; 14
 654:	e4 e0       	ldi	r30, 0x04	; 4
 656:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__epilogue_restores__+0x1c>

0000065a <vfprintf>:
 65a:	ab e0       	ldi	r26, 0x0B	; 11
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e3 e3       	ldi	r30, 0x33	; 51
 660:	f3 e0       	ldi	r31, 0x03	; 3
 662:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__prologue_saves__>
 666:	6c 01       	movw	r12, r24
 668:	7b 01       	movw	r14, r22
 66a:	8a 01       	movw	r16, r20
 66c:	fc 01       	movw	r30, r24
 66e:	17 82       	std	Z+7, r1	; 0x07
 670:	16 82       	std	Z+6, r1	; 0x06
 672:	83 81       	ldd	r24, Z+3	; 0x03
 674:	81 ff       	sbrs	r24, 1
 676:	cc c1       	rjmp	.+920    	; 0xa10 <vfprintf+0x3b6>
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	3c 01       	movw	r6, r24
 67e:	f6 01       	movw	r30, r12
 680:	93 81       	ldd	r25, Z+3	; 0x03
 682:	f7 01       	movw	r30, r14
 684:	93 fd       	sbrc	r25, 3
 686:	85 91       	lpm	r24, Z+
 688:	93 ff       	sbrs	r25, 3
 68a:	81 91       	ld	r24, Z+
 68c:	7f 01       	movw	r14, r30
 68e:	88 23       	and	r24, r24
 690:	09 f4       	brne	.+2      	; 0x694 <vfprintf+0x3a>
 692:	ba c1       	rjmp	.+884    	; 0xa08 <vfprintf+0x3ae>
 694:	85 32       	cpi	r24, 0x25	; 37
 696:	39 f4       	brne	.+14     	; 0x6a6 <vfprintf+0x4c>
 698:	93 fd       	sbrc	r25, 3
 69a:	85 91       	lpm	r24, Z+
 69c:	93 ff       	sbrs	r25, 3
 69e:	81 91       	ld	r24, Z+
 6a0:	7f 01       	movw	r14, r30
 6a2:	85 32       	cpi	r24, 0x25	; 37
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <vfprintf+0x56>
 6a6:	b6 01       	movw	r22, r12
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 6ae:	e7 cf       	rjmp	.-50     	; 0x67e <vfprintf+0x24>
 6b0:	91 2c       	mov	r9, r1
 6b2:	21 2c       	mov	r2, r1
 6b4:	31 2c       	mov	r3, r1
 6b6:	ff e1       	ldi	r31, 0x1F	; 31
 6b8:	f3 15       	cp	r31, r3
 6ba:	d8 f0       	brcs	.+54     	; 0x6f2 <vfprintf+0x98>
 6bc:	8b 32       	cpi	r24, 0x2B	; 43
 6be:	79 f0       	breq	.+30     	; 0x6de <vfprintf+0x84>
 6c0:	38 f4       	brcc	.+14     	; 0x6d0 <vfprintf+0x76>
 6c2:	80 32       	cpi	r24, 0x20	; 32
 6c4:	79 f0       	breq	.+30     	; 0x6e4 <vfprintf+0x8a>
 6c6:	83 32       	cpi	r24, 0x23	; 35
 6c8:	a1 f4       	brne	.+40     	; 0x6f2 <vfprintf+0x98>
 6ca:	23 2d       	mov	r18, r3
 6cc:	20 61       	ori	r18, 0x10	; 16
 6ce:	1d c0       	rjmp	.+58     	; 0x70a <vfprintf+0xb0>
 6d0:	8d 32       	cpi	r24, 0x2D	; 45
 6d2:	61 f0       	breq	.+24     	; 0x6ec <vfprintf+0x92>
 6d4:	80 33       	cpi	r24, 0x30	; 48
 6d6:	69 f4       	brne	.+26     	; 0x6f2 <vfprintf+0x98>
 6d8:	23 2d       	mov	r18, r3
 6da:	21 60       	ori	r18, 0x01	; 1
 6dc:	16 c0       	rjmp	.+44     	; 0x70a <vfprintf+0xb0>
 6de:	83 2d       	mov	r24, r3
 6e0:	82 60       	ori	r24, 0x02	; 2
 6e2:	38 2e       	mov	r3, r24
 6e4:	e3 2d       	mov	r30, r3
 6e6:	e4 60       	ori	r30, 0x04	; 4
 6e8:	3e 2e       	mov	r3, r30
 6ea:	2a c0       	rjmp	.+84     	; 0x740 <vfprintf+0xe6>
 6ec:	f3 2d       	mov	r31, r3
 6ee:	f8 60       	ori	r31, 0x08	; 8
 6f0:	1d c0       	rjmp	.+58     	; 0x72c <vfprintf+0xd2>
 6f2:	37 fc       	sbrc	r3, 7
 6f4:	2d c0       	rjmp	.+90     	; 0x750 <vfprintf+0xf6>
 6f6:	20 ed       	ldi	r18, 0xD0	; 208
 6f8:	28 0f       	add	r18, r24
 6fa:	2a 30       	cpi	r18, 0x0A	; 10
 6fc:	40 f0       	brcs	.+16     	; 0x70e <vfprintf+0xb4>
 6fe:	8e 32       	cpi	r24, 0x2E	; 46
 700:	b9 f4       	brne	.+46     	; 0x730 <vfprintf+0xd6>
 702:	36 fc       	sbrc	r3, 6
 704:	81 c1       	rjmp	.+770    	; 0xa08 <vfprintf+0x3ae>
 706:	23 2d       	mov	r18, r3
 708:	20 64       	ori	r18, 0x40	; 64
 70a:	32 2e       	mov	r3, r18
 70c:	19 c0       	rjmp	.+50     	; 0x740 <vfprintf+0xe6>
 70e:	36 fe       	sbrs	r3, 6
 710:	06 c0       	rjmp	.+12     	; 0x71e <vfprintf+0xc4>
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	98 9e       	mul	r9, r24
 716:	20 0d       	add	r18, r0
 718:	11 24       	eor	r1, r1
 71a:	92 2e       	mov	r9, r18
 71c:	11 c0       	rjmp	.+34     	; 0x740 <vfprintf+0xe6>
 71e:	ea e0       	ldi	r30, 0x0A	; 10
 720:	2e 9e       	mul	r2, r30
 722:	20 0d       	add	r18, r0
 724:	11 24       	eor	r1, r1
 726:	22 2e       	mov	r2, r18
 728:	f3 2d       	mov	r31, r3
 72a:	f0 62       	ori	r31, 0x20	; 32
 72c:	3f 2e       	mov	r3, r31
 72e:	08 c0       	rjmp	.+16     	; 0x740 <vfprintf+0xe6>
 730:	8c 36       	cpi	r24, 0x6C	; 108
 732:	21 f4       	brne	.+8      	; 0x73c <vfprintf+0xe2>
 734:	83 2d       	mov	r24, r3
 736:	80 68       	ori	r24, 0x80	; 128
 738:	38 2e       	mov	r3, r24
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0xe6>
 73c:	88 36       	cpi	r24, 0x68	; 104
 73e:	41 f4       	brne	.+16     	; 0x750 <vfprintf+0xf6>
 740:	f7 01       	movw	r30, r14
 742:	93 fd       	sbrc	r25, 3
 744:	85 91       	lpm	r24, Z+
 746:	93 ff       	sbrs	r25, 3
 748:	81 91       	ld	r24, Z+
 74a:	7f 01       	movw	r14, r30
 74c:	81 11       	cpse	r24, r1
 74e:	b3 cf       	rjmp	.-154    	; 0x6b6 <vfprintf+0x5c>
 750:	98 2f       	mov	r25, r24
 752:	9f 7d       	andi	r25, 0xDF	; 223
 754:	95 54       	subi	r25, 0x45	; 69
 756:	93 30       	cpi	r25, 0x03	; 3
 758:	28 f4       	brcc	.+10     	; 0x764 <vfprintf+0x10a>
 75a:	0c 5f       	subi	r16, 0xFC	; 252
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	9f e3       	ldi	r25, 0x3F	; 63
 760:	99 83       	std	Y+1, r25	; 0x01
 762:	0d c0       	rjmp	.+26     	; 0x77e <vfprintf+0x124>
 764:	83 36       	cpi	r24, 0x63	; 99
 766:	31 f0       	breq	.+12     	; 0x774 <vfprintf+0x11a>
 768:	83 37       	cpi	r24, 0x73	; 115
 76a:	71 f0       	breq	.+28     	; 0x788 <vfprintf+0x12e>
 76c:	83 35       	cpi	r24, 0x53	; 83
 76e:	09 f0       	breq	.+2      	; 0x772 <vfprintf+0x118>
 770:	59 c0       	rjmp	.+178    	; 0x824 <vfprintf+0x1ca>
 772:	21 c0       	rjmp	.+66     	; 0x7b6 <vfprintf+0x15c>
 774:	f8 01       	movw	r30, r16
 776:	80 81       	ld	r24, Z
 778:	89 83       	std	Y+1, r24	; 0x01
 77a:	0e 5f       	subi	r16, 0xFE	; 254
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
 77e:	88 24       	eor	r8, r8
 780:	83 94       	inc	r8
 782:	91 2c       	mov	r9, r1
 784:	53 01       	movw	r10, r6
 786:	13 c0       	rjmp	.+38     	; 0x7ae <vfprintf+0x154>
 788:	28 01       	movw	r4, r16
 78a:	f2 e0       	ldi	r31, 0x02	; 2
 78c:	4f 0e       	add	r4, r31
 78e:	51 1c       	adc	r5, r1
 790:	f8 01       	movw	r30, r16
 792:	a0 80       	ld	r10, Z
 794:	b1 80       	ldd	r11, Z+1	; 0x01
 796:	36 fe       	sbrs	r3, 6
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <vfprintf+0x146>
 79a:	69 2d       	mov	r22, r9
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <vfprintf+0x14a>
 7a0:	6f ef       	ldi	r22, 0xFF	; 255
 7a2:	7f ef       	ldi	r23, 0xFF	; 255
 7a4:	c5 01       	movw	r24, r10
 7a6:	0e 94 19 05 	call	0xa32	; 0xa32 <strnlen>
 7aa:	4c 01       	movw	r8, r24
 7ac:	82 01       	movw	r16, r4
 7ae:	f3 2d       	mov	r31, r3
 7b0:	ff 77       	andi	r31, 0x7F	; 127
 7b2:	3f 2e       	mov	r3, r31
 7b4:	16 c0       	rjmp	.+44     	; 0x7e2 <vfprintf+0x188>
 7b6:	28 01       	movw	r4, r16
 7b8:	22 e0       	ldi	r18, 0x02	; 2
 7ba:	42 0e       	add	r4, r18
 7bc:	51 1c       	adc	r5, r1
 7be:	f8 01       	movw	r30, r16
 7c0:	a0 80       	ld	r10, Z
 7c2:	b1 80       	ldd	r11, Z+1	; 0x01
 7c4:	36 fe       	sbrs	r3, 6
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <vfprintf+0x174>
 7c8:	69 2d       	mov	r22, r9
 7ca:	70 e0       	ldi	r23, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <vfprintf+0x178>
 7ce:	6f ef       	ldi	r22, 0xFF	; 255
 7d0:	7f ef       	ldi	r23, 0xFF	; 255
 7d2:	c5 01       	movw	r24, r10
 7d4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <strnlen_P>
 7d8:	4c 01       	movw	r8, r24
 7da:	f3 2d       	mov	r31, r3
 7dc:	f0 68       	ori	r31, 0x80	; 128
 7de:	3f 2e       	mov	r3, r31
 7e0:	82 01       	movw	r16, r4
 7e2:	33 fc       	sbrc	r3, 3
 7e4:	1b c0       	rjmp	.+54     	; 0x81c <vfprintf+0x1c2>
 7e6:	82 2d       	mov	r24, r2
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	88 16       	cp	r8, r24
 7ec:	99 06       	cpc	r9, r25
 7ee:	b0 f4       	brcc	.+44     	; 0x81c <vfprintf+0x1c2>
 7f0:	b6 01       	movw	r22, r12
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 7fa:	2a 94       	dec	r2
 7fc:	f4 cf       	rjmp	.-24     	; 0x7e6 <vfprintf+0x18c>
 7fe:	f5 01       	movw	r30, r10
 800:	37 fc       	sbrc	r3, 7
 802:	85 91       	lpm	r24, Z+
 804:	37 fe       	sbrs	r3, 7
 806:	81 91       	ld	r24, Z+
 808:	5f 01       	movw	r10, r30
 80a:	b6 01       	movw	r22, r12
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 812:	21 10       	cpse	r2, r1
 814:	2a 94       	dec	r2
 816:	21 e0       	ldi	r18, 0x01	; 1
 818:	82 1a       	sub	r8, r18
 81a:	91 08       	sbc	r9, r1
 81c:	81 14       	cp	r8, r1
 81e:	91 04       	cpc	r9, r1
 820:	71 f7       	brne	.-36     	; 0x7fe <vfprintf+0x1a4>
 822:	e8 c0       	rjmp	.+464    	; 0x9f4 <vfprintf+0x39a>
 824:	84 36       	cpi	r24, 0x64	; 100
 826:	11 f0       	breq	.+4      	; 0x82c <vfprintf+0x1d2>
 828:	89 36       	cpi	r24, 0x69	; 105
 82a:	41 f5       	brne	.+80     	; 0x87c <vfprintf+0x222>
 82c:	f8 01       	movw	r30, r16
 82e:	37 fe       	sbrs	r3, 7
 830:	07 c0       	rjmp	.+14     	; 0x840 <vfprintf+0x1e6>
 832:	60 81       	ld	r22, Z
 834:	71 81       	ldd	r23, Z+1	; 0x01
 836:	82 81       	ldd	r24, Z+2	; 0x02
 838:	93 81       	ldd	r25, Z+3	; 0x03
 83a:	0c 5f       	subi	r16, 0xFC	; 252
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	08 c0       	rjmp	.+16     	; 0x850 <vfprintf+0x1f6>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	07 2e       	mov	r0, r23
 846:	00 0c       	add	r0, r0
 848:	88 0b       	sbc	r24, r24
 84a:	99 0b       	sbc	r25, r25
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	f3 2d       	mov	r31, r3
 852:	ff 76       	andi	r31, 0x6F	; 111
 854:	3f 2e       	mov	r3, r31
 856:	97 ff       	sbrs	r25, 7
 858:	09 c0       	rjmp	.+18     	; 0x86c <vfprintf+0x212>
 85a:	90 95       	com	r25
 85c:	80 95       	com	r24
 85e:	70 95       	com	r23
 860:	61 95       	neg	r22
 862:	7f 4f       	sbci	r23, 0xFF	; 255
 864:	8f 4f       	sbci	r24, 0xFF	; 255
 866:	9f 4f       	sbci	r25, 0xFF	; 255
 868:	f0 68       	ori	r31, 0x80	; 128
 86a:	3f 2e       	mov	r3, r31
 86c:	2a e0       	ldi	r18, 0x0A	; 10
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	a3 01       	movw	r20, r6
 872:	0e 94 60 05 	call	0xac0	; 0xac0 <__ultoa_invert>
 876:	88 2e       	mov	r8, r24
 878:	86 18       	sub	r8, r6
 87a:	45 c0       	rjmp	.+138    	; 0x906 <vfprintf+0x2ac>
 87c:	85 37       	cpi	r24, 0x75	; 117
 87e:	31 f4       	brne	.+12     	; 0x88c <vfprintf+0x232>
 880:	23 2d       	mov	r18, r3
 882:	2f 7e       	andi	r18, 0xEF	; 239
 884:	b2 2e       	mov	r11, r18
 886:	2a e0       	ldi	r18, 0x0A	; 10
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	25 c0       	rjmp	.+74     	; 0x8d6 <vfprintf+0x27c>
 88c:	93 2d       	mov	r25, r3
 88e:	99 7f       	andi	r25, 0xF9	; 249
 890:	b9 2e       	mov	r11, r25
 892:	8f 36       	cpi	r24, 0x6F	; 111
 894:	c1 f0       	breq	.+48     	; 0x8c6 <vfprintf+0x26c>
 896:	18 f4       	brcc	.+6      	; 0x89e <vfprintf+0x244>
 898:	88 35       	cpi	r24, 0x58	; 88
 89a:	79 f0       	breq	.+30     	; 0x8ba <vfprintf+0x260>
 89c:	b5 c0       	rjmp	.+362    	; 0xa08 <vfprintf+0x3ae>
 89e:	80 37       	cpi	r24, 0x70	; 112
 8a0:	19 f0       	breq	.+6      	; 0x8a8 <vfprintf+0x24e>
 8a2:	88 37       	cpi	r24, 0x78	; 120
 8a4:	21 f0       	breq	.+8      	; 0x8ae <vfprintf+0x254>
 8a6:	b0 c0       	rjmp	.+352    	; 0xa08 <vfprintf+0x3ae>
 8a8:	e9 2f       	mov	r30, r25
 8aa:	e0 61       	ori	r30, 0x10	; 16
 8ac:	be 2e       	mov	r11, r30
 8ae:	b4 fe       	sbrs	r11, 4
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <vfprintf+0x272>
 8b2:	fb 2d       	mov	r31, r11
 8b4:	f4 60       	ori	r31, 0x04	; 4
 8b6:	bf 2e       	mov	r11, r31
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <vfprintf+0x272>
 8ba:	34 fe       	sbrs	r3, 4
 8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <vfprintf+0x278>
 8be:	29 2f       	mov	r18, r25
 8c0:	26 60       	ori	r18, 0x06	; 6
 8c2:	b2 2e       	mov	r11, r18
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <vfprintf+0x278>
 8c6:	28 e0       	ldi	r18, 0x08	; 8
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <vfprintf+0x27c>
 8cc:	20 e1       	ldi	r18, 0x10	; 16
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <vfprintf+0x27c>
 8d2:	20 e1       	ldi	r18, 0x10	; 16
 8d4:	32 e0       	ldi	r19, 0x02	; 2
 8d6:	f8 01       	movw	r30, r16
 8d8:	b7 fe       	sbrs	r11, 7
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <vfprintf+0x290>
 8dc:	60 81       	ld	r22, Z
 8de:	71 81       	ldd	r23, Z+1	; 0x01
 8e0:	82 81       	ldd	r24, Z+2	; 0x02
 8e2:	93 81       	ldd	r25, Z+3	; 0x03
 8e4:	0c 5f       	subi	r16, 0xFC	; 252
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0x29c>
 8ea:	60 81       	ld	r22, Z
 8ec:	71 81       	ldd	r23, Z+1	; 0x01
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 5f       	subi	r16, 0xFE	; 254
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	a3 01       	movw	r20, r6
 8f8:	0e 94 60 05 	call	0xac0	; 0xac0 <__ultoa_invert>
 8fc:	88 2e       	mov	r8, r24
 8fe:	86 18       	sub	r8, r6
 900:	fb 2d       	mov	r31, r11
 902:	ff 77       	andi	r31, 0x7F	; 127
 904:	3f 2e       	mov	r3, r31
 906:	36 fe       	sbrs	r3, 6
 908:	0d c0       	rjmp	.+26     	; 0x924 <vfprintf+0x2ca>
 90a:	23 2d       	mov	r18, r3
 90c:	2e 7f       	andi	r18, 0xFE	; 254
 90e:	a2 2e       	mov	r10, r18
 910:	89 14       	cp	r8, r9
 912:	58 f4       	brcc	.+22     	; 0x92a <vfprintf+0x2d0>
 914:	34 fe       	sbrs	r3, 4
 916:	0b c0       	rjmp	.+22     	; 0x92e <vfprintf+0x2d4>
 918:	32 fc       	sbrc	r3, 2
 91a:	09 c0       	rjmp	.+18     	; 0x92e <vfprintf+0x2d4>
 91c:	83 2d       	mov	r24, r3
 91e:	8e 7e       	andi	r24, 0xEE	; 238
 920:	a8 2e       	mov	r10, r24
 922:	05 c0       	rjmp	.+10     	; 0x92e <vfprintf+0x2d4>
 924:	b8 2c       	mov	r11, r8
 926:	a3 2c       	mov	r10, r3
 928:	03 c0       	rjmp	.+6      	; 0x930 <vfprintf+0x2d6>
 92a:	b8 2c       	mov	r11, r8
 92c:	01 c0       	rjmp	.+2      	; 0x930 <vfprintf+0x2d6>
 92e:	b9 2c       	mov	r11, r9
 930:	a4 fe       	sbrs	r10, 4
 932:	0f c0       	rjmp	.+30     	; 0x952 <vfprintf+0x2f8>
 934:	fe 01       	movw	r30, r28
 936:	e8 0d       	add	r30, r8
 938:	f1 1d       	adc	r31, r1
 93a:	80 81       	ld	r24, Z
 93c:	80 33       	cpi	r24, 0x30	; 48
 93e:	21 f4       	brne	.+8      	; 0x948 <vfprintf+0x2ee>
 940:	9a 2d       	mov	r25, r10
 942:	99 7e       	andi	r25, 0xE9	; 233
 944:	a9 2e       	mov	r10, r25
 946:	09 c0       	rjmp	.+18     	; 0x95a <vfprintf+0x300>
 948:	a2 fe       	sbrs	r10, 2
 94a:	06 c0       	rjmp	.+12     	; 0x958 <vfprintf+0x2fe>
 94c:	b3 94       	inc	r11
 94e:	b3 94       	inc	r11
 950:	04 c0       	rjmp	.+8      	; 0x95a <vfprintf+0x300>
 952:	8a 2d       	mov	r24, r10
 954:	86 78       	andi	r24, 0x86	; 134
 956:	09 f0       	breq	.+2      	; 0x95a <vfprintf+0x300>
 958:	b3 94       	inc	r11
 95a:	a3 fc       	sbrc	r10, 3
 95c:	11 c0       	rjmp	.+34     	; 0x980 <vfprintf+0x326>
 95e:	a0 fe       	sbrs	r10, 0
 960:	06 c0       	rjmp	.+12     	; 0x96e <vfprintf+0x314>
 962:	b2 14       	cp	r11, r2
 964:	88 f4       	brcc	.+34     	; 0x988 <vfprintf+0x32e>
 966:	28 0c       	add	r2, r8
 968:	92 2c       	mov	r9, r2
 96a:	9b 18       	sub	r9, r11
 96c:	0e c0       	rjmp	.+28     	; 0x98a <vfprintf+0x330>
 96e:	b2 14       	cp	r11, r2
 970:	60 f4       	brcc	.+24     	; 0x98a <vfprintf+0x330>
 972:	b6 01       	movw	r22, r12
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 97c:	b3 94       	inc	r11
 97e:	f7 cf       	rjmp	.-18     	; 0x96e <vfprintf+0x314>
 980:	b2 14       	cp	r11, r2
 982:	18 f4       	brcc	.+6      	; 0x98a <vfprintf+0x330>
 984:	2b 18       	sub	r2, r11
 986:	02 c0       	rjmp	.+4      	; 0x98c <vfprintf+0x332>
 988:	98 2c       	mov	r9, r8
 98a:	21 2c       	mov	r2, r1
 98c:	a4 fe       	sbrs	r10, 4
 98e:	10 c0       	rjmp	.+32     	; 0x9b0 <vfprintf+0x356>
 990:	b6 01       	movw	r22, r12
 992:	80 e3       	ldi	r24, 0x30	; 48
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 99a:	a2 fe       	sbrs	r10, 2
 99c:	17 c0       	rjmp	.+46     	; 0x9cc <vfprintf+0x372>
 99e:	a1 fc       	sbrc	r10, 1
 9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <vfprintf+0x34e>
 9a2:	88 e7       	ldi	r24, 0x78	; 120
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <vfprintf+0x352>
 9a8:	88 e5       	ldi	r24, 0x58	; 88
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	b6 01       	movw	r22, r12
 9ae:	0c c0       	rjmp	.+24     	; 0x9c8 <vfprintf+0x36e>
 9b0:	8a 2d       	mov	r24, r10
 9b2:	86 78       	andi	r24, 0x86	; 134
 9b4:	59 f0       	breq	.+22     	; 0x9cc <vfprintf+0x372>
 9b6:	a1 fe       	sbrs	r10, 1
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <vfprintf+0x364>
 9ba:	8b e2       	ldi	r24, 0x2B	; 43
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <vfprintf+0x366>
 9be:	80 e2       	ldi	r24, 0x20	; 32
 9c0:	a7 fc       	sbrc	r10, 7
 9c2:	8d e2       	ldi	r24, 0x2D	; 45
 9c4:	b6 01       	movw	r22, r12
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 9cc:	89 14       	cp	r8, r9
 9ce:	38 f4       	brcc	.+14     	; 0x9de <vfprintf+0x384>
 9d0:	b6 01       	movw	r22, r12
 9d2:	80 e3       	ldi	r24, 0x30	; 48
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 9da:	9a 94       	dec	r9
 9dc:	f7 cf       	rjmp	.-18     	; 0x9cc <vfprintf+0x372>
 9de:	8a 94       	dec	r8
 9e0:	f3 01       	movw	r30, r6
 9e2:	e8 0d       	add	r30, r8
 9e4:	f1 1d       	adc	r31, r1
 9e6:	80 81       	ld	r24, Z
 9e8:	b6 01       	movw	r22, r12
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 9f0:	81 10       	cpse	r8, r1
 9f2:	f5 cf       	rjmp	.-22     	; 0x9de <vfprintf+0x384>
 9f4:	22 20       	and	r2, r2
 9f6:	09 f4       	brne	.+2      	; 0x9fa <vfprintf+0x3a0>
 9f8:	42 ce       	rjmp	.-892    	; 0x67e <vfprintf+0x24>
 9fa:	b6 01       	movw	r22, r12
 9fc:	80 e2       	ldi	r24, 0x20	; 32
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	0e 94 24 05 	call	0xa48	; 0xa48 <fputc>
 a04:	2a 94       	dec	r2
 a06:	f6 cf       	rjmp	.-20     	; 0x9f4 <vfprintf+0x39a>
 a08:	f6 01       	movw	r30, r12
 a0a:	86 81       	ldd	r24, Z+6	; 0x06
 a0c:	97 81       	ldd	r25, Z+7	; 0x07
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <vfprintf+0x3ba>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	2b 96       	adiw	r28, 0x0b	; 11
 a16:	e2 e1       	ldi	r30, 0x12	; 18
 a18:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__epilogue_restores__>

00000a1c <strnlen_P>:
 a1c:	fc 01       	movw	r30, r24
 a1e:	05 90       	lpm	r0, Z+
 a20:	61 50       	subi	r22, 0x01	; 1
 a22:	70 40       	sbci	r23, 0x00	; 0
 a24:	01 10       	cpse	r0, r1
 a26:	d8 f7       	brcc	.-10     	; 0xa1e <strnlen_P+0x2>
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	8e 0f       	add	r24, r30
 a2e:	9f 1f       	adc	r25, r31
 a30:	08 95       	ret

00000a32 <strnlen>:
 a32:	fc 01       	movw	r30, r24
 a34:	61 50       	subi	r22, 0x01	; 1
 a36:	70 40       	sbci	r23, 0x00	; 0
 a38:	01 90       	ld	r0, Z+
 a3a:	01 10       	cpse	r0, r1
 a3c:	d8 f7       	brcc	.-10     	; 0xa34 <strnlen+0x2>
 a3e:	80 95       	com	r24
 a40:	90 95       	com	r25
 a42:	8e 0f       	add	r24, r30
 a44:	9f 1f       	adc	r25, r31
 a46:	08 95       	ret

00000a48 <fputc>:
 a48:	0f 93       	push	r16
 a4a:	1f 93       	push	r17
 a4c:	cf 93       	push	r28
 a4e:	df 93       	push	r29
 a50:	fb 01       	movw	r30, r22
 a52:	23 81       	ldd	r18, Z+3	; 0x03
 a54:	21 fd       	sbrc	r18, 1
 a56:	03 c0       	rjmp	.+6      	; 0xa5e <fputc+0x16>
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	9f ef       	ldi	r25, 0xFF	; 255
 a5c:	2c c0       	rjmp	.+88     	; 0xab6 <fputc+0x6e>
 a5e:	22 ff       	sbrs	r18, 2
 a60:	16 c0       	rjmp	.+44     	; 0xa8e <fputc+0x46>
 a62:	46 81       	ldd	r20, Z+6	; 0x06
 a64:	57 81       	ldd	r21, Z+7	; 0x07
 a66:	24 81       	ldd	r18, Z+4	; 0x04
 a68:	35 81       	ldd	r19, Z+5	; 0x05
 a6a:	42 17       	cp	r20, r18
 a6c:	53 07       	cpc	r21, r19
 a6e:	44 f4       	brge	.+16     	; 0xa80 <fputc+0x38>
 a70:	a0 81       	ld	r26, Z
 a72:	b1 81       	ldd	r27, Z+1	; 0x01
 a74:	9d 01       	movw	r18, r26
 a76:	2f 5f       	subi	r18, 0xFF	; 255
 a78:	3f 4f       	sbci	r19, 0xFF	; 255
 a7a:	31 83       	std	Z+1, r19	; 0x01
 a7c:	20 83       	st	Z, r18
 a7e:	8c 93       	st	X, r24
 a80:	26 81       	ldd	r18, Z+6	; 0x06
 a82:	37 81       	ldd	r19, Z+7	; 0x07
 a84:	2f 5f       	subi	r18, 0xFF	; 255
 a86:	3f 4f       	sbci	r19, 0xFF	; 255
 a88:	37 83       	std	Z+7, r19	; 0x07
 a8a:	26 83       	std	Z+6, r18	; 0x06
 a8c:	14 c0       	rjmp	.+40     	; 0xab6 <fputc+0x6e>
 a8e:	8b 01       	movw	r16, r22
 a90:	ec 01       	movw	r28, r24
 a92:	fb 01       	movw	r30, r22
 a94:	00 84       	ldd	r0, Z+8	; 0x08
 a96:	f1 85       	ldd	r31, Z+9	; 0x09
 a98:	e0 2d       	mov	r30, r0
 a9a:	09 95       	icall
 a9c:	89 2b       	or	r24, r25
 a9e:	e1 f6       	brne	.-72     	; 0xa58 <fputc+0x10>
 aa0:	d8 01       	movw	r26, r16
 aa2:	16 96       	adiw	r26, 0x06	; 6
 aa4:	8d 91       	ld	r24, X+
 aa6:	9c 91       	ld	r25, X
 aa8:	17 97       	sbiw	r26, 0x07	; 7
 aaa:	01 96       	adiw	r24, 0x01	; 1
 aac:	17 96       	adiw	r26, 0x07	; 7
 aae:	9c 93       	st	X, r25
 ab0:	8e 93       	st	-X, r24
 ab2:	16 97       	sbiw	r26, 0x06	; 6
 ab4:	ce 01       	movw	r24, r28
 ab6:	df 91       	pop	r29
 ab8:	cf 91       	pop	r28
 aba:	1f 91       	pop	r17
 abc:	0f 91       	pop	r16
 abe:	08 95       	ret

00000ac0 <__ultoa_invert>:
 ac0:	fa 01       	movw	r30, r20
 ac2:	aa 27       	eor	r26, r26
 ac4:	28 30       	cpi	r18, 0x08	; 8
 ac6:	51 f1       	breq	.+84     	; 0xb1c <__ultoa_invert+0x5c>
 ac8:	20 31       	cpi	r18, 0x10	; 16
 aca:	81 f1       	breq	.+96     	; 0xb2c <__ultoa_invert+0x6c>
 acc:	e8 94       	clt
 ace:	6f 93       	push	r22
 ad0:	6e 7f       	andi	r22, 0xFE	; 254
 ad2:	6e 5f       	subi	r22, 0xFE	; 254
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	af 4f       	sbci	r26, 0xFF	; 255
 adc:	b1 e0       	ldi	r27, 0x01	; 1
 ade:	3e d0       	rcall	.+124    	; 0xb5c <__ultoa_invert+0x9c>
 ae0:	b4 e0       	ldi	r27, 0x04	; 4
 ae2:	3c d0       	rcall	.+120    	; 0xb5c <__ultoa_invert+0x9c>
 ae4:	67 0f       	add	r22, r23
 ae6:	78 1f       	adc	r23, r24
 ae8:	89 1f       	adc	r24, r25
 aea:	9a 1f       	adc	r25, r26
 aec:	a1 1d       	adc	r26, r1
 aee:	68 0f       	add	r22, r24
 af0:	79 1f       	adc	r23, r25
 af2:	8a 1f       	adc	r24, r26
 af4:	91 1d       	adc	r25, r1
 af6:	a1 1d       	adc	r26, r1
 af8:	6a 0f       	add	r22, r26
 afa:	71 1d       	adc	r23, r1
 afc:	81 1d       	adc	r24, r1
 afe:	91 1d       	adc	r25, r1
 b00:	a1 1d       	adc	r26, r1
 b02:	20 d0       	rcall	.+64     	; 0xb44 <__ultoa_invert+0x84>
 b04:	09 f4       	brne	.+2      	; 0xb08 <__ultoa_invert+0x48>
 b06:	68 94       	set
 b08:	3f 91       	pop	r19
 b0a:	2a e0       	ldi	r18, 0x0A	; 10
 b0c:	26 9f       	mul	r18, r22
 b0e:	11 24       	eor	r1, r1
 b10:	30 19       	sub	r19, r0
 b12:	30 5d       	subi	r19, 0xD0	; 208
 b14:	31 93       	st	Z+, r19
 b16:	de f6       	brtc	.-74     	; 0xace <__ultoa_invert+0xe>
 b18:	cf 01       	movw	r24, r30
 b1a:	08 95       	ret
 b1c:	46 2f       	mov	r20, r22
 b1e:	47 70       	andi	r20, 0x07	; 7
 b20:	40 5d       	subi	r20, 0xD0	; 208
 b22:	41 93       	st	Z+, r20
 b24:	b3 e0       	ldi	r27, 0x03	; 3
 b26:	0f d0       	rcall	.+30     	; 0xb46 <__ultoa_invert+0x86>
 b28:	c9 f7       	brne	.-14     	; 0xb1c <__ultoa_invert+0x5c>
 b2a:	f6 cf       	rjmp	.-20     	; 0xb18 <__ultoa_invert+0x58>
 b2c:	46 2f       	mov	r20, r22
 b2e:	4f 70       	andi	r20, 0x0F	; 15
 b30:	40 5d       	subi	r20, 0xD0	; 208
 b32:	4a 33       	cpi	r20, 0x3A	; 58
 b34:	18 f0       	brcs	.+6      	; 0xb3c <__ultoa_invert+0x7c>
 b36:	49 5d       	subi	r20, 0xD9	; 217
 b38:	31 fd       	sbrc	r19, 1
 b3a:	40 52       	subi	r20, 0x20	; 32
 b3c:	41 93       	st	Z+, r20
 b3e:	02 d0       	rcall	.+4      	; 0xb44 <__ultoa_invert+0x84>
 b40:	a9 f7       	brne	.-22     	; 0xb2c <__ultoa_invert+0x6c>
 b42:	ea cf       	rjmp	.-44     	; 0xb18 <__ultoa_invert+0x58>
 b44:	b4 e0       	ldi	r27, 0x04	; 4
 b46:	a6 95       	lsr	r26
 b48:	97 95       	ror	r25
 b4a:	87 95       	ror	r24
 b4c:	77 95       	ror	r23
 b4e:	67 95       	ror	r22
 b50:	ba 95       	dec	r27
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0x86>
 b54:	00 97       	sbiw	r24, 0x00	; 0
 b56:	61 05       	cpc	r22, r1
 b58:	71 05       	cpc	r23, r1
 b5a:	08 95       	ret
 b5c:	9b 01       	movw	r18, r22
 b5e:	ac 01       	movw	r20, r24
 b60:	0a 2e       	mov	r0, r26
 b62:	06 94       	lsr	r0
 b64:	57 95       	ror	r21
 b66:	47 95       	ror	r20
 b68:	37 95       	ror	r19
 b6a:	27 95       	ror	r18
 b6c:	ba 95       	dec	r27
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__ultoa_invert+0xa2>
 b70:	62 0f       	add	r22, r18
 b72:	73 1f       	adc	r23, r19
 b74:	84 1f       	adc	r24, r20
 b76:	95 1f       	adc	r25, r21
 b78:	a0 1d       	adc	r26, r0
 b7a:	08 95       	ret

00000b7c <__prologue_saves__>:
 b7c:	2f 92       	push	r2
 b7e:	3f 92       	push	r3
 b80:	4f 92       	push	r4
 b82:	5f 92       	push	r5
 b84:	6f 92       	push	r6
 b86:	7f 92       	push	r7
 b88:	8f 92       	push	r8
 b8a:	9f 92       	push	r9
 b8c:	af 92       	push	r10
 b8e:	bf 92       	push	r11
 b90:	cf 92       	push	r12
 b92:	df 92       	push	r13
 b94:	ef 92       	push	r14
 b96:	ff 92       	push	r15
 b98:	0f 93       	push	r16
 b9a:	1f 93       	push	r17
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	cd b7       	in	r28, 0x3d	; 61
 ba2:	de b7       	in	r29, 0x3e	; 62
 ba4:	ca 1b       	sub	r28, r26
 ba6:	db 0b       	sbc	r29, r27
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	f8 94       	cli
 bac:	de bf       	out	0x3e, r29	; 62
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	cd bf       	out	0x3d, r28	; 61
 bb2:	09 94       	ijmp

00000bb4 <__epilogue_restores__>:
 bb4:	2a 88       	ldd	r2, Y+18	; 0x12
 bb6:	39 88       	ldd	r3, Y+17	; 0x11
 bb8:	48 88       	ldd	r4, Y+16	; 0x10
 bba:	5f 84       	ldd	r5, Y+15	; 0x0f
 bbc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bbe:	7d 84       	ldd	r7, Y+13	; 0x0d
 bc0:	8c 84       	ldd	r8, Y+12	; 0x0c
 bc2:	9b 84       	ldd	r9, Y+11	; 0x0b
 bc4:	aa 84       	ldd	r10, Y+10	; 0x0a
 bc6:	b9 84       	ldd	r11, Y+9	; 0x09
 bc8:	c8 84       	ldd	r12, Y+8	; 0x08
 bca:	df 80       	ldd	r13, Y+7	; 0x07
 bcc:	ee 80       	ldd	r14, Y+6	; 0x06
 bce:	fd 80       	ldd	r15, Y+5	; 0x05
 bd0:	0c 81       	ldd	r16, Y+4	; 0x04
 bd2:	1b 81       	ldd	r17, Y+3	; 0x03
 bd4:	aa 81       	ldd	r26, Y+2	; 0x02
 bd6:	b9 81       	ldd	r27, Y+1	; 0x01
 bd8:	ce 0f       	add	r28, r30
 bda:	d1 1d       	adc	r29, r1
 bdc:	0f b6       	in	r0, 0x3f	; 63
 bde:	f8 94       	cli
 be0:	de bf       	out	0x3e, r29	; 62
 be2:	0f be       	out	0x3f, r0	; 63
 be4:	cd bf       	out	0x3d, r28	; 61
 be6:	ed 01       	movw	r28, r26
 be8:	08 95       	ret

00000bea <_exit>:
 bea:	f8 94       	cli

00000bec <__stop_program>:
 bec:	ff cf       	rjmp	.-2      	; 0xbec <__stop_program>
